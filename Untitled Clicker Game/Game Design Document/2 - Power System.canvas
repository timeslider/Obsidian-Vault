{
	"nodes":[
		{"id":"d7a193b8e33be5b0","type":"text","text":"# Solar\n---\n```gdscript\nclass_name Solar\nextends PowerGenerator\n\n# The amount of sun will change throughout the 'day'\nvar is_in_sun: float\n\n# The number of solar generators currently owned\nstatic var count: int = 0\n\n# Constructor\nfunc _init() -> void:\n\tcount += 1\n\n# Deconstructor\nfunc _notification(what):\n    if what == NOTIFICATION_PREDELETE:\n        count -= 1\n\nfunc requirements_met() -> bool:\n    if is_in_sun > 0:\n        return true\n\n\n```\n\n\n","x":320,"y":-460,"width":560,"height":660},
		{"id":"1c6fd9a6aa6985be","type":"text","text":"# Solar Wind Turbine\n---\n```gdscript\nclass_name SolarWindTurbine\nextends PowerGenerator\n\n# Should be sampled from a smooth noise\n## Wind that is constantly changing\nvar wind_speed : float\n\n# The number of solar generators currently owned\nstatic var count: int = 0\n\n# Constructor\nfunc _init() -> void:\n\tcount += 1\n\n# Deconstructor\nfunc _notification(what):\n    if what == NOTIFICATION_PREDELETE:\n        count -= 1\n\nfunc requirements_met() -> bool:\n    if wind_speed > 0:\n        return true\n```","x":320,"y":240,"width":560,"height":640},
		{"id":"c16ffc87e3421090","type":"text","text":"# PowerBase\n---\n```gdscript\nabstract class_name Power\n\n## This is everything in common to the Power class. It is eventually split into generators and consumers.\n\n# As long as the requirement has been met, then generate or consume power. Example... need to think of some\nvar requirements: Array\n\n# How much power this machine generates or consumes\nvar power_amount: float = 0.0\n\n# Checks if the requirement has been met\nfunc requirements_met() -> bool:\n    pass\n\n\n```","x":-1220,"y":-460,"width":620,"height":960},
		{"id":"a966be9ab8686c7b","type":"text","text":"# PowerGenerator\n---\n``` gdscript\n## Wrapper class for power generators.\n```\n\n\n\n","x":-400,"y":-460,"width":380,"height":280},
		{"id":"7a9f7a01c11716ef","type":"text","text":"# PowerConsumer\n---\n``` gdscript\n## Wrapper class for power consumers.\n```\n\n\n\n","x":-400,"y":-130,"width":380,"height":290},
		{"id":"3098946d251a24d0","type":"text","text":"Not sure if they'll need anything.","x":-400,"y":-520,"width":250,"height":60},
		{"id":"204c344794258428","type":"text","text":"# Oven\n---\n```gdscript\nclass_name Oven\nextends PowerConsumer\n\n# The number of oven consumers currently owned\nstatic var count: int = 0\n\n# Constructor\nfunc _init() -> void:\n\tcount += 1\n\n# Deconstructor\nfunc _notification(what):\n    if what == NOTIFICATION_PREDELETE:\n        count -= 1\n\n# Instead of count, maybe we'll have to track how many have met the requirements\nfunc requirements_met() -> bool:\n    # for each item in recipe, do we have more or equal to on hand?\n\n\n```\n\nAn oven is also a crafting machine so it would have a crafting node which is a state machine.\n```gdscript\nclass_name CraftingMaching\nextends StateMachine\n\n# Some where in here it would use the power_factor. If power factor is 1, then it would run at it's normal speed but anything less than that would slow it down. A power factor of 0.0 would mean the machine is off.\n```\n","x":320,"y":1000,"width":560,"height":860},
		{"id":"529332a1ff56cc2f","type":"text","text":"Some of the stuff in the PowerManager might be better served in the Power class","x":-30,"y":-1580,"width":350,"height":100},
		{"id":"d8aadf006a496731","type":"text","text":"# PowerManager\n---\n```gdscript\n## This class combines all the power data and interacts with other systems\n\n@onready var power_generators: Array[PowerGenerator] = [$Solar, $Wind, $FissionReactor]\n@onready var power_consumers: Array[PowerConsumer] = [$Oven, $Miners, $Microwaves]\n\nvar total_power_generation: float = 0.0\nvar total_power_consumption: float = 0.0\n\n## Power factor is a number between 0 and 1\nvar power_factor: float = 1.0\nvar _needs_recalculation: bool = true\n\nfunc _ready():\n    # Connect to all power devices\n    for generator in power_generators:\n        generator.power_state_changed.connect(_on_power_state_changed)\n    for consumer in power_consumers:\n        consumer.power_state_changed.connect(_on_power_state_changed)\n\nfunc _on_power_state_changed():\n    _needs_recalculation = true\n\nfunc get_power_factor() -> float:\n    if _needs_recalculation:\n        _calculate_power_factor()\n        _needs_recalculation = false\n    return power_factor\n\nfunc _calculate_power_factor():\n    var total_generation = 0.0\n    var total_consumption = 0.0\n    \n    for generator in power_generators:\n        if generator.requirements_met():\n            total_generation += generator.count * generator.power_amount\n    \n    for consumer in power_consumers:\n        if consumer.requirements_met():\n            total_consumption += consumer.count * consumer.power_amount\n    \n    power_factor = clamp(total_generation / total_consumption, 0.0, 1.0) if total_consumption > 0 else 1.0\n```","x":320,"y":-1580,"width":940,"height":1060}
	],
	"edges":[
		{"id":"07788053ca922a46","fromNode":"d7a193b8e33be5b0","fromSide":"left","toNode":"d8aadf006a496731","toSide":"left"},
		{"id":"2e3ecbc80f7f7a3f","fromNode":"1c6fd9a6aa6985be","fromSide":"left","toNode":"d8aadf006a496731","toSide":"left"},
		{"id":"33ae902dfaef279d","fromNode":"1c6fd9a6aa6985be","fromSide":"left","toNode":"a966be9ab8686c7b","toSide":"right"},
		{"id":"105576b45607657e","fromNode":"d7a193b8e33be5b0","fromSide":"left","toNode":"a966be9ab8686c7b","toSide":"right"},
		{"id":"eda78769c4343168","fromNode":"a966be9ab8686c7b","fromSide":"left","toNode":"c16ffc87e3421090","toSide":"right"},
		{"id":"b6dbe160a9757c8a","fromNode":"7a9f7a01c11716ef","fromSide":"left","toNode":"c16ffc87e3421090","toSide":"right"},
		{"id":"98e3893830dbb220","fromNode":"204c344794258428","fromSide":"left","toNode":"7a9f7a01c11716ef","toSide":"right"}
	]
}