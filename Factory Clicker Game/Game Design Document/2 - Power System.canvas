{
	"nodes":[
		{"id":"d7a193b8e33be5b0","type":"text","text":"# StarterSolar\n---\n```gdscript\nclass_name StarterSolar\nextends PowerGenerator\n\n## You start the game with one of these. You can't buy more or sell\n\n# The amount of sun will change throughout the 'day'\nvar is_in_sun: float\n\n# No requirements :)\n\nfunc requirements_met() -> bool:\n\treturn is_in_sun > 0:\n```\n\n\n","x":320,"y":-460,"width":560,"height":460},
		{"id":"1c6fd9a6aa6985be","type":"text","text":"# Solar Wind Turbine\n---\n```gdscript\nclass_name SolarWindTurbine\nextends PowerGenerator\n\n# Should be sampled from a smooth noise\n## Wind that is constantly changing\nvar wind_speed : float\n\n# I think this might be unnecessary \nfunc requirements_met() -> bool:\n    if wind_speed > 0:\n        return true\n```","x":320,"y":240,"width":560,"height":640},
		{"id":"c16ffc87e3421090","type":"text","text":"# PowerBase\n---\n```gdscript\nclass_name Power\nextends Node\n\n## This is everything in common to the Power class. It is eventually split into generators and consumers.\n\n# This will come from a central location\n# var inventory: Dictionary = {}\n\n\n# As long as the requirement has been met, then generate or consume power. Example... need to think of some\n# This can be a resource\nvar requirements: Dictionary[String, int] = {}\n\n# How much power this machine generates or consumes\nvar power_amount: float = 0.0\n\n# How many units owned\nvar amount_owned: int = 0\n\n\nfunc _ready():\n\tpass\n\n\n# Checks if the requirement has been met\nfunc requirements_met() -> bool:\n    for requirement in requirements:\n\t    if requirement not in inventory:\n\t\t    return false\n\t\tif inventory[requirement] < required_amount.get(requirement, 1):\n\t\t    return false\n\t# remove requirements from inventory\n\treturn true\n\n\n\nfunc add(amount: int):\n\tamount_owned += amount\n\n\n\nfunc subtract(amount: int):\n\tif amount_owned - amount >= 0:\n\t\tamount_owned -= amount\n\n\n# Used for UI stuff\nfunc can_subtract(amount: int) -> bool:\n\treturn amount_owned >= amount:\n\n\nfunc get_total_power() -> float:\n\treturn amount_owned * power_amount\n```","x":-1420,"y":-460,"width":820,"height":1420},
		{"id":"a966be9ab8686c7b","type":"text","text":"# PowerGenerator\n---\n``` gdscript\n## Wrapper class for power generators.\n```\n\n\n\n","x":-400,"y":-460,"width":380,"height":280},
		{"id":"7a9f7a01c11716ef","type":"text","text":"# PowerConsumer\n---\n``` gdscript\n## Wrapper class for power consumers.\n\n# Bascially, the only difference between a Generator and a Consumer is that a generator will use items to product power and only produce power and there's no upper limit to how much it can output. If it generates more than the grid can use, then that is wasted.\n\n# Consumers use power and inventory items and only output inventory items.\n\n# The relationship is symmetric\n```\n\n\n\n","x":-400,"y":-130,"width":380,"height":590},
		{"id":"3098946d251a24d0","type":"text","text":"Not sure if they'll need anything.","x":-400,"y":-520,"width":250,"height":60},
		{"id":"204c344794258428","type":"text","text":"# Oven\n---\n```gdscript\nclass_name Oven\nextends PowerConsumer\n\n\n\n```\n\nAn oven is also a crafting machine so it would have a crafting node which is a state machine.\n```gdscript\nclass_name CraftingMaching\nextends StateMachine\n\n# Some where in here it would use the power_factor. If power factor is 1, then it would run at it's normal speed but anything less than that would slow it down. A power factor of 0.0 would mean the machine is off.\n```\n","x":320,"y":1000,"width":560,"height":860},
		{"id":"529332a1ff56cc2f","type":"text","text":"Some of the stuff in the PowerManager might be better served in the Power class","x":-30,"y":-1580,"width":350,"height":100},
		{"id":"d8aadf006a496731","type":"text","text":"# PowerManager\n---\n```gdscript\n## This class combines all the power data and interacts with other systems\n\n@onready var power_generators: Array[PowerGenerator] = [$Solar, $Wind, $FissionReactor]\n@onready var power_consumers: Array[PowerConsumer] = [$Oven, $Miners, $Microwaves]\n\nvar total_power_generation: float = 0.0\nvar total_power_consumption: float = 0.0\n\n## Power factor is a number between 0 and 1\nvar power_factor: float = 1.0\nvar _needs_recalculation: bool = true\n\nfunc _ready():\n    # Connect to all power devices\n    for generator in power_generators:\n        generator.power_state_changed.connect(_on_power_state_changed)\n    for consumer in power_consumers:\n        consumer.power_state_changed.connect(_on_power_state_changed)\n\nfunc _on_power_state_changed():\n    _needs_recalculation = true\n\nfunc get_power_factor() -> float:\n    if _needs_recalculation:\n        _calculate_power_factor()\n        _needs_recalculation = false\n    return power_factor\n\nfunc _calculate_power_factor():\n    var total_generation = 0.0\n    var total_consumption = 0.0\n    \n    for generator in power_generators:\n        if generator.requirements_met():\n            total_generation += generator.count * generator.power_amount\n    \n    for consumer in power_consumers:\n        if consumer.requirements_met():\n            total_consumption += consumer.count * consumer.power_amount\n    \n    power_factor = clamp(total_generation / total_consumption, 0.0, 1.0) if total_consumption > 0 else 1.0\n```","x":320,"y":-1580,"width":1480,"height":1060},
		{"id":"62d213204d0d7ca0","type":"text","text":"# Solar\n---\n```gdscript\nclass_name Solar\nextends PowerGenerator\n\n# The amount of sun will change throughout the 'day'\nvar is_in_sun: float\n\n# No requirements :)\n\nfunc requirements_met() -> bool:\n\treturn is_in_sun > 0:\n```\n\n\n","x":980,"y":-185,"width":560,"height":400},
		{"id":"8d71b2d43c600a32","type":"text","text":"# Inventory items\n---\n```gdscript\nclass_name Inventory\nextends Node\n\n\n\nvar inventory: Dictionary[String, ItemDefinition] = {}\n\nfunc add_inventory(item: ItemDefintion, amount: int):\n\t# The logic to add an item to the inventory\n\n\n```","x":-1260,"y":-1760,"width":600,"height":520},
		{"id":"086c11f076476d6f","type":"text","text":"# Item\n---\n```gdscript\nclass_name Item\nextends Resource\n```\n\n\n","x":-1700,"y":-1760,"width":250,"height":440},
		{"id":"981e736a8c43310e","type":"text","text":"Generators consumer items (and sometimes power) to produce power.\n\nConsumers consume power (and sometimes items) to produce power.","x":-400,"y":-740,"width":380,"height":160}
	],
	"edges":[
		{"id":"07788053ca922a46","fromNode":"d7a193b8e33be5b0","fromSide":"left","toNode":"d8aadf006a496731","toSide":"left"},
		{"id":"2e3ecbc80f7f7a3f","fromNode":"1c6fd9a6aa6985be","fromSide":"left","toNode":"d8aadf006a496731","toSide":"left"},
		{"id":"33ae902dfaef279d","fromNode":"1c6fd9a6aa6985be","fromSide":"left","toNode":"a966be9ab8686c7b","toSide":"right"},
		{"id":"105576b45607657e","fromNode":"d7a193b8e33be5b0","fromSide":"left","toNode":"a966be9ab8686c7b","toSide":"right"},
		{"id":"eda78769c4343168","fromNode":"a966be9ab8686c7b","fromSide":"left","toNode":"c16ffc87e3421090","toSide":"right"},
		{"id":"b6dbe160a9757c8a","fromNode":"7a9f7a01c11716ef","fromSide":"left","toNode":"c16ffc87e3421090","toSide":"right"},
		{"id":"98e3893830dbb220","fromNode":"204c344794258428","fromSide":"left","toNode":"7a9f7a01c11716ef","toSide":"right"},
		{"id":"7d8a1dbfb54e58c8","fromNode":"c16ffc87e3421090","fromSide":"top","toNode":"8d71b2d43c600a32","toSide":"bottom"},
		{"id":"80cc61bb8a0adbc4","fromNode":"62d213204d0d7ca0","fromSide":"left","toNode":"a966be9ab8686c7b","toSide":"right"}
	]
}